{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#elixir-ee-git-training","title":"ELIXIR EE git training","text":""},{"location":"#lesson-overview","title":"Lesson overview","text":"<p> Description Git is used across the world to help developers keep track of changes while working on different parts of the same project. Teams are not the only ones to benefit from version control: lone researchers can benefit immensely. Keeping a record of what was changed, when, and why is extremely useful for all researchers if they ever need to come back to the project later on (e.g., a year later, when memory has faded).</p> <p>Version control is the lab notebook of the digital world: it\u2019s what professionals use to keep track of what they\u2019ve done and to collaborate with other people. Every large software development project relies on it, and most programmers use it for their small jobs as well. And it isn\u2019t just for software: books, papers, small data sets, and anything that changes over time or needs to be shared can and should be stored in a version control system.</p> <p></p> <p> Prerequisites To be able to follow this course, learners should: \u20031. Bring your own laptop and install git: https://git-scm.com/downloads \u20032. install Visual Studio Code: https://code.visualstudio.com/Download</p> <p></p> <p> Learning Outcomes: By the end of the course, learners will be able to: \u2003- Recognize version control importance \u2003- Able to create a repository in Git \u2003- Track changes and collaborate in Git </p> <p></p> <p> Level: Beginner</p> <p> License: Creative Commons Attribution 4.0 International License</p>"},{"location":"#contributors","title":"Contributors","text":"<p> Priit Adler </p> <p></p> <p> ChatGPT </p>"},{"location":"#setup","title":"Setup","text":""},{"location":"#data-setup","title":"Data setup","text":"<p>Playground repository \u2003- Make a fork of this repository to your own GitHub account. (make sure to uncheck the \u201cmain branch only\u201d option) \u2003- Clone the repository to your local machine.</p>"},{"location":"#software-used-in-this-lesson","title":"Software used in this lesson:","text":"<p>\u20031. Git \u20032. Visual Studio Code</p>"},{"location":"#feedback","title":"Feedback","text":"<p>Please provide feedback on this lesson here</p>"},{"location":"course_schedule/","title":"Course schedule","text":"start end topic 10:00 10:30 coffee! 12:00 13:00 lunch! <p>Generate markdown tables at tablesgenerator.com</p>"},{"location":"follow_up_training/","title":"Follow up training","text":"<p>lorem ipsum</p>"},{"location":"chapters/01_introduction/","title":"Introduction","text":"<p>Git is a powerful distributed version control system that allows multiple people to work on a project simultaneously without overwriting each other\u2019s changes. It keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.</p> <p>In this course, participants will learn: - The basics of Git and version control - How to set up and configure Git - How to create and manage repositories - Branching and merging strategies - Collaboration workflows using Git</p>"},{"location":"chapters/01_introduction/#core-concepts-of-git","title":"Core Concepts of Git","text":"<p>Git is a distributed version control system that allows each user to have their own local repository, which contains the full history of the project. This makes Git fast and flexible, as users can work offline and only need to connect to a remote repository when they want to share their changes.</p>"},{"location":"chapters/01_introduction/#version-control","title":"Version Control","text":"<p>Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. With Git, every time you save the state of your project (commit), Git takes a snapshot of all your files and stores a reference to that snapshot. If a file has not changed, Git doesn\u2019t store the file again, just a link to the previous identical file it has already stored.</p>"},{"location":"chapters/01_introduction/#three-states-of-files","title":"Three States of Files","text":"<p>In Git, files can reside in one of three states<sup>1</sup>: - Working Directory: The files that you see in your file system. These are the files that you are currently working on. - Staging Area: A file that has been marked to be included in the next commit. The staging area allows you to prepare a set of changes before committing them to the repository. This gives you more control over what changes are included in each commit. - Repository (.git directory): The committed files that are safely stored in your local Git repository.</p> <p>The workflow in Git typically involves moving files between these three states. \u20031. You modify files in your working directory. \u20032. You stage them to the staging area. \u20033. you then commit them to the repository.</p> <p>Note</p> <p>Commiting should be part of your daily workflow when working on a project. It is a good practice to commit your changes whenever you reach a logical stopping point or complete a task. </p>"},{"location":"chapters/01_introduction/#key-concepts","title":"Key Concepts:","text":"<ul> <li>Repository: A directory which contains your project work, as well as a few files (hidden by default) which are used by Git to keep track of changes.</li> <li>Commit: A snapshot of your repository at a specific point in time.</li> <li>Branch: A parallel version of your repository. It is contained within your repository but does not affect the primary or main branch.</li> <li>Merge: The process of combining changes from different branches.</li> <li>Clone: A copy of a repository that lives on your computer instead of on a website\u2019s server somewhere.</li> <li>Push: Sending your committed changes to a remote repository, such as a repository hosted on GitHub.</li> <li>Pull: Fetching changes from a remote repository and merging them into your local repository.</li> </ul>"},{"location":"chapters/01_introduction/#working-with-repositories","title":"Working with Repositories","text":"<p>A Git repository can be local (on your computer) or remote (on a server). You can create a new repository from scratch, or you can clone an existing repository to get a copy of it on your local machine.</p>"},{"location":"chapters/01_introduction/#creating-a-repository","title":"Creating a Repository:","text":"<p>To create a new local repository, navigate to your project directory and run: </p><pre><code>git init\n</code></pre> This command creates a new subdirectory named <code>.git</code> that contains all of your necessary repository files."},{"location":"chapters/01_introduction/#cloning-a-repository","title":"Cloning a Repository:","text":"<p>To clone a remote repository, use the <code>git clone</code> command followed by the repository URL: </p><pre><code>git clone https://github.com/user/repo.git\n</code></pre> This command creates a directory named <code>repo</code>, initializes a <code>.git</code> directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version."},{"location":"chapters/01_introduction/#managing-repositories","title":"Managing Repositories:","text":"<p>You can add files to your repository using the <code>git add</code> command, commit changes with <code>git commit</code>, and push your changes to a remote repository with <code>git push</code>.</p>"},{"location":"chapters/01_introduction/#example-workflow","title":"Example Workflow:","text":"<ol> <li> <p>Create a new repository:     </p><pre><code>mkdir myproject\ncd myproject\ngit init\n</code></pre> </li> <li> <p>Add a new file and commit it:     </p><pre><code>echo \"Hello, Git!\" &gt; hello.txt\ngit add hello.txt\ngit commit -m \"Add hello.txt\"\n</code></pre> </li> <li> <p>Connect to a remote repository:     </p><pre><code>git remote add origin https://github.com/user/myproject.git\ngit push -u origin main\n</code></pre> </li> <li> <p>Make changes and push them:     </p><pre><code>echo \"Some changes\" &gt;&gt; hello.txt\ngit add hello.txt\ngit commit -m \"Update hello.txt\"\ngit push\n</code></pre> </li> </ol> <p>By understanding these core concepts and commands, you\u2019ll be well on your way to mastering Git and improving your workflow.</p>"},{"location":"chapters/01_introduction/#first-time-git-setup","title":"First-Time Git Setup","text":"<p>Before you start using Git, you need to configure some settings. These settings are stored in your Git configuration file and include your name and email address, which will be associated with your commits.</p>"},{"location":"chapters/01_introduction/#required-git-config-commands","title":"Required Git Config Commands","text":"<p>To set up Git for the first time, you need to configure your username and email. Open your terminal and run the following commands:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre> <p>These commands set your name and email address for all Git repositories on your system.</p>"},{"location":"chapters/01_introduction/#checking-existing-configurations","title":"Checking Existing Configurations","text":"<p>To check your current Git configuration, use the following command:</p> <pre><code>git config --list\n</code></pre> <p>This command will display a list of all the Git configurations that are currently set.</p>"},{"location":"chapters/01_introduction/#defining-required-configurations","title":"Defining Required Configurations","text":"<p>If you need to change any configuration, you can use the <code>git config</code> command again with the appropriate options. For example, to change your email address, you can run:</p> <pre><code>git config --global user.email \"new.email@example.com\"\n</code></pre>"},{"location":"chapters/01_introduction/#using-vs-code-for-git","title":"Using VS Code for Git","text":"<p>During the lessons, we will be working with Visual Studio Code (VS Code). VS Code has built-in support for Git, making it easier to manage your repositories. To configure Git in VS Code, follow these steps:</p> <ol> <li>Open VS Code.</li> <li>Go to the Command Palette by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (Mac).</li> <li>Type <code>Git: Configure User Name</code> and press Enter. Enter your name when prompted.</li> <li>Type <code>Git: Configure User Email</code> and press Enter. Enter your email address when prompted.</li> </ol> <p>By setting up these configurations, you\u2019ll be ready to start using Git effectively in your projects.</p> <p>Also see using git in VS Code<sup>2</sup>.</p> <ol> <li> <p>Scott Chacon and Ben Straub. Pro Git. Apress, 2014. URL: https://git-scm.com/book/en/v2.\u00a0\u21a9</p> </li> <li> <p>Visual Studio Code Documentation Team. Source control in visual studio code. Accessed: 2024-11-05. URL: https://code.visualstudio.com/docs/sourcecontrol/overview.\u00a0\u21a9</p> </li> </ol>"},{"location":"chapters/02_working_with_git/","title":"Working with Git","text":""},{"location":"chapters/02_working_with_git/#basic-git-commands-and-workflow","title":"Basic Git Commands and Workflow","text":""},{"location":"chapters/02_working_with_git/#initializing-a-repository","title":"Initializing a Repository","text":"<p>To start using Git, you need to initialize a repository in your project directory. This creates a <code>.git</code> directory that tracks all changes.</p> <pre><code>git init\n</code></pre>"},{"location":"chapters/02_working_with_git/#checking-the-status-of-your-repository","title":"Checking the Status of Your Repository","text":"<p>Use <code>git status</code> to see the state of your working directory and staging area. It shows which changes have been staged, which haven\u2019t, and which files aren\u2019t being tracked by Git.</p> <pre><code>git status\n</code></pre>"},{"location":"chapters/02_working_with_git/#adding-files-to-the-staging-area","title":"Adding Files to the Staging Area","text":"<p>Before committing changes, you need to add them to the staging area using <code>git add</code>. This prepares the files to be included in the next commit.</p> <pre><code>git add &lt;filename&gt;\n</code></pre> <p>To add all changes in the directory:</p> <pre><code>git add .\n</code></pre>"},{"location":"chapters/02_working_with_git/#committing-changes","title":"Committing Changes","text":"<p>After staging the files, commit them to the repository with a message describing the changes.</p> <pre><code>git commit -m \"Your commit message\"\n</code></pre>"},{"location":"chapters/02_working_with_git/#git-workflow","title":"Git Workflow","text":"<p>The image above illustrates the Git workflow<sup>1</sup>. It starts with modifying files in your working directory. Once changes are made, you add them to the staging area using <code>git add</code>. After staging, you commit the changes to the repository with <code>git commit</code>. This cycle repeats as you work on your project.</p>"},{"location":"chapters/02_working_with_git/#pushing-changes-to-a-remote-repository","title":"Pushing Changes to a Remote Repository","text":"<p>To share your changes with others, push them to a remote repository like GitHub.</p> <pre><code>git push origin main\n</code></pre> <p>Creating a New Repository</p> <p>Create a new Git repository in a new directory and add a file to it. Stage and commit the changes.</p> Solution <ul> <li> <p>Create a new directory and navigate to it: </p><pre><code>mkdir myproject\ncd myproject\n</code></pre> </li> <li> <p>Initialize a Git repository: </p><pre><code>git init\n</code></pre> </li> <li> <p>Add a new file and commit it: </p><pre><code>echo \"Hello, Git!\" &gt; hello.txt\ngit add hello.txt\ngit commit -m \"Add hello.txt\"\n</code></pre> </li> </ul> <p>Note</p> <p>Keep in mind that Git local repository is a hidden directory <code>.git</code> in the root of your project directory. It contains all the necessary metadata for version control. If you delete this directory, you will lose your project history as well. To serve as a backup, you can push your changes to a remote repository.</p> <p>Create repository on GitHub</p> <p>Create a new repository on GitHub and connect it to your local repository. Push your changes to the remote repository.</p> Solution <ul> <li> <p>Create a new repository on GitHub. Do not initialize it with a README, .gitignore, or license.</p> </li> <li> <p>Connect your local repository to the remote repository: </p><pre><code># substitute your username and repository name\ngit remote add origin https://github.com/yourusername/your-repository.git \n</code></pre> </li> <li> <p>Push your changes to the remote repository: </p><pre><code>git push -u origin main\n</code></pre> </li> </ul>"},{"location":"chapters/02_working_with_git/#branching-and-merging","title":"Branching and Merging","text":""},{"location":"chapters/02_working_with_git/#working-with-branches","title":"Working with Branches","text":"<p>Branches are an essential part of Git, allowing you to work on different features or fixes independently. This helps in maintaining a clean and organized project history.</p>"},{"location":"chapters/02_working_with_git/#creating-a-branch","title":"Creating a Branch","text":"<p>To create a new branch, use the git branch command followed by the branch name:</p> <pre><code>git branch &lt;branch-name&gt;\n</code></pre> <p>Switch to the new branch using git checkout:</p> <pre><code>git checkout &lt;branch-name&gt;\n</code></pre> <p>Or, you can create and switch to a new branch in one command:</p> <pre><code>git checkout -b &lt;branch-name&gt;\n</code></pre>"},{"location":"chapters/02_working_with_git/#why-use-branches","title":"Why Use Branches?","text":"<ul> <li>Isolation: Keep different lines of development separate.</li> <li>Collaboration: Multiple team members can work on different features simultaneously.</li> <li>Experimentation: Safely try out new ideas without affecting the main codebase.</li> <li>History: Each branch maintains its own history of commits, making it easy to track changes and revert if necessary.</li> <li>Merging: Once the work on a branch is complete, it can be merged back into the main branch, integrating the changes.</li> </ul>"},{"location":"chapters/02_working_with_git/#merging-a-branch","title":"Merging a Branch","text":"<p>First, switch to the branch you want to merge into:</p> <pre><code>git checkout main\n</code></pre> <p>Then, merge the feature branch:</p> <pre><code>git merge &lt;branch-name&gt;\n</code></pre>"},{"location":"chapters/02_working_with_git/#best-practices-for-merging","title":"Best Practices for Merging","text":"<ul> <li>Regularly Sync with Main: Frequently merge changes from the main branch into your feature branch to minimize conflicts.</li> <li>Use Pull Requests: For collaborative projects, use pull requests to review and discuss changes before merging.</li> <li>Resolve Conflicts Carefully: If conflicts arise, carefully resolve them to ensure the codebase remains stable.</li> </ul>"},{"location":"chapters/02_working_with_git/#handling-merge-conflicts","title":"Handling Merge Conflicts","text":"<p>Merge conflicts occur when changes in different branches conflict with each other. Git will mark the conflicts in the affected files, and you will need to resolve them manually.</p>"},{"location":"chapters/02_working_with_git/#steps-to-resolve-conflicts","title":"Steps to Resolve Conflicts","text":"<p>\u20031. Identify Conflicts: Git will highlight the conflicting areas in the files. \u20032. Edit Files: Manually edit the files to resolve conflicts. \u20033. Stage Resolved Files: Once resolved, stage the files using git add. \u20034. Complete the Merge: Commit the merge to complete the process.</p> <pre><code>git add &lt;resolved-file&gt; git commit\n</code></pre> <p>By following these practices, you can effectively manage branches and merges in your Git workflow, ensuring a smooth and efficient development process.</p> <p>Creating and Merging Branches</p> <p>Create a new branch, make changes, and merge it back into the main branch.</p> Solution <ul> <li> <p>Create a new branch and switch to it: </p><pre><code>git checkout -b feature-branch\n</code></pre> </li> <li> <p>Make changes to your files and commit them: </p><pre><code>git add .\ngit commit -m \"Add new feature\"\n</code></pre> </li> <li> <p>Switch back to the main branch and merge the feature branch: </p><pre><code>git checkout main\ngit merge feature-branch\n</code></pre> </li> </ul> <p>Resolving Merge Conflicts</p> <p>Using VS Code, clone the playgound repository and follow instructions to create a merge conflict and resolve it.</p> Solution <pre><code>git clone git@github.com:ELIXIREstonia/2024-11-06-git-playground.git\ngit checkout ugly-conflict # this is needed to fetch the branch from origin\n# make changes to the README.md file if you feel like it\ngit add README.md\ngit commit -m \"Change README.md\"\ngit checkout main\ngit merge ugly-conflict\n# resolve the conflict in the README.md file (VS Code will help you)\ngit add &lt;resolved-file&gt;\ngit commit\n</code></pre>"},{"location":"chapters/02_working_with_git/#navigating-git-history","title":"Navigating Git History","text":""},{"location":"chapters/02_working_with_git/#exploring-git-logs-and-history","title":"Exploring Git Logs and History","text":"<p>Understanding the history of your project is crucial for tracking changes, debugging issues, and collaborating with others. Git provides several commands to help you navigate and manage your project\u2019s history.</p>"},{"location":"chapters/02_working_with_git/#viewing-commit-history","title":"Viewing Commit History","text":"<p>The <code>git log</code> command displays the commit history of your repository.</p> <pre><code>git log \n</code></pre> <p>This command shows a list of commits, including the commit hash, author, date, and commit message. You can use various options to customize the output:</p> <ul> <li><code>--oneline</code>: Show each commit on a single line.</li> <li><code>--graph</code>: Display a graphical representation of the commit history.</li> <li><code>--decorate</code>: Show branch and tag names alongside commit messages.</li> </ul> <pre><code>git log --oneline --graph --decorate \n</code></pre>"},{"location":"chapters/02_working_with_git/#reverting-changes","title":"Reverting Changes","text":"<p>If you need to undo changes, Git provides several options:</p>"},{"location":"chapters/02_working_with_git/#reverting-a-commit","title":"Reverting a Commit","text":"<p>The <code>git revert</code> command creates a new commit that undoes the changes from a previous commit.</p> <pre><code>git revert &lt;commit-hash&gt; \n</code></pre>"},{"location":"chapters/02_working_with_git/#resetting-to-a-previous-commit","title":"Resetting to a Previous Commit","text":"<p>The git reset command moves the current branch to a specified commit. This can be used to undo commits or unstage changes.</p> <ul> <li><code>--soft</code>: Keep changes in the working directory and staging area.</li> <li><code>--mixed</code>: Keep changes in the working directory but unstage them.</li> <li><code>--hard</code>: Discard all changes and reset the working directory to the specified commit.</li> </ul> <pre><code>git reset --hard &lt;commit-hash&gt; \n</code></pre> <p>Note</p> <p>Be cautious when using <code>git reset --hard</code>, as it permanently removes changes and cannot be undone. Almost always a better option is to use <code>git revert</code>, especially if changes have been pushed to a (collaborative) remote repository.</p>"},{"location":"chapters/02_working_with_git/#collaborating-with-remote-repositories","title":"Collaborating with Remote Repositories","text":""},{"location":"chapters/02_working_with_git/#collaboration-and-remote-workflows","title":"Collaboration and Remote Workflows","text":"<p>Collaborating with others on a project often involves using remote repositories. These repositories, hosted on platforms like GitHub, GitLab, or Bitbucket, allow multiple contributors to work on the same codebase.</p>"},{"location":"chapters/02_working_with_git/#setting-up-a-remote-repository","title":"Setting Up a Remote Repository","text":"<p>To start collaborating, you need to set up a remote repository and connect your local repository to it.</p>"},{"location":"chapters/02_working_with_git/#adding-a-remote-repository","title":"Adding a Remote Repository","text":"<p>Use the <code>git remote add</code> command to add a remote repository. Replace  with the URL of your remote repository.</p> <pre><code>git remote add origin &lt;remote-url&gt;\n</code></pre>"},{"location":"chapters/02_working_with_git/#verifying-remote-repositories","title":"Verifying Remote Repositories","text":"<p>To verify that the remote repository has been added, use the <code>git remote -v</code> command.</p> <pre><code>git remote -v\n</code></pre>"},{"location":"chapters/02_working_with_git/#pushing-changes-to-a-remote-repository_1","title":"Pushing Changes to a Remote Repository","text":"<p>After committing your changes locally, you can push them to the remote repository to share with others.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"chapters/02_working_with_git/#pulling-changes-from-a-remote-repository","title":"Pulling Changes from a Remote Repository","text":"<p>To update your local repository with changes from the remote repository, use the <code>git pull</code> command.</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"chapters/02_working_with_git/#creating-and-managing-pull-requests","title":"Creating and Managing Pull Requests","text":"<p>Pull requests (PRs) are a way to propose changes to a repository. They allow team members to review and discuss changes before merging them into the main branch.</p> <p>Note</p> <p>You can clone all public repositories without authentication. However, to push changes to a repository, you need to authenticate with the remote platform. Also you can\u2019t push to a repository you don\u2019t have write access to (you are not part of the team \u2013 collaborators). Most open source projects are such public repositories and you can 1. fork them to your own account and push changes to your fork. 2. then create a pull request to the original repository.</p>"},{"location":"chapters/02_working_with_git/#creating-a-pull-request","title":"Creating a Pull Request","text":"<ol> <li>Push Your Branch: Push your feature branch to the remote repository. <code>git push origin &lt;branch-name&gt;</code></li> <li>Open a Pull Request: On the remote repository platform (e.g., GitHub), navigate to the repository and open a new pull request from your feature branch to the main branch.</li> </ol>"},{"location":"chapters/02_working_with_git/#reviewing-and-merging-pull-requests","title":"Reviewing and Merging Pull Requests","text":"<p>Team members can review the pull request, leave comments, and suggest changes. Once the changes are approved, the pull request can be merged into the main branch.</p>"},{"location":"chapters/02_working_with_git/#best-practices-for-teamwork","title":"Best Practices for Teamwork","text":"<ul> <li>Branch Naming Conventions: Use clear and consistent naming conventions for branches (e.g., <code>feature/</code>, <code>bugfix/</code>, <code>hotfix/</code>).</li> <li>Code Reviews: Conduct thorough code reviews to maintain code quality and share knowledge.</li> <li>Frequent Commits: Commit changes frequently with meaningful commit messages.</li> <li>Sync Regularly: Regularly pull changes from the remote repository to stay up-to-date with the latest codebase.</li> <li>Resolve Conflicts Early: Address merge conflicts as soon as they arise to avoid larger issues later.</li> </ul> <p>Creating a pull request</p> <p>Create a new branch, make changes, push the branch to the remote repository, and create a pull request. You can use the playground repository to practice.</p>"},{"location":"chapters/02_working_with_git/#handling-common-issues","title":"Handling Common Issues","text":""},{"location":"chapters/02_working_with_git/#tips-for-managing-git-challenges","title":"Tips for Managing Git Challenges","text":"<p>Handling merge conflicts, using .gitignore, and maintaining a clean Git history.</p>"},{"location":"chapters/02_working_with_git/#handling-merge-conflicts_1","title":"Handling Merge Conflicts","text":"<p>Merge conflicts occur when changes in different branches conflict with each other. Git will mark the conflicts in the affected files, and you will need to resolve them manually.</p>"},{"location":"chapters/02_working_with_git/#steps-to-resolve-conflicts_1","title":"Steps to Resolve Conflicts","text":"<p>\u20031. Identify Conflicts: Git will highlight the conflicting areas in the files. \u20032. Edit Files: Manually edit the files to resolve conflicts. \u20033. Stage Resolved Files: Once resolved, stage the files using git add. \u20034. Complete the Merge: Commit the merge to complete the process.</p> <pre><code>git add &lt;resolved-file&gt;\ngit commit\n</code></pre>"},{"location":"chapters/02_working_with_git/#using-gitignore","title":"Using .gitignore","text":"<p>The .gitignore file specifies which files and directories to ignore in a project. This is useful for excluding temporary files, build artifacts, and other files that should not be tracked by Git.</p>"},{"location":"chapters/02_working_with_git/#creating-a-gitignore-file","title":"Creating a .gitignore File","text":"<p>Create a .gitignore file in the root of your repository and add patterns for files and directories to ignore.</p> <pre><code># Example .gitignore file\n*.log\n*.tmp\nnode_modules/\ndist/\n</code></pre>"},{"location":"chapters/02_working_with_git/#maintaining-a-clean-git-history","title":"Maintaining a Clean Git History","text":"<p>A clean Git history makes it easier to understand the evolution of a project and track down issues. Here are some tips for maintaining a clean history:</p> <ul> <li>Frequent Commits: Commit changes frequently with meaningful commit messages.</li> <li>Squash Commits: Squash multiple related commits into a single commit before merging.</li> </ul>"},{"location":"chapters/02_working_with_git/#wrap-up-and-best-practices","title":"Wrap-Up and Best Practices","text":"<p>Summary of key points, practical tips for effective use of Git, and a Q&amp;A section for participants.</p>"},{"location":"chapters/02_working_with_git/#key-points","title":"Key Points","text":"<ul> <li>Version Control: Git is a powerful version control system that helps you track changes, collaborate with others, and manage your project\u2019s history.</li> <li>Basic Commands: Familiarize yourself with basic Git commands like <code>git init</code>, <code>git add</code>, <code>git commit</code>, <code>git status</code>, <code>git push</code>, and <code>git pull</code>.</li> <li>Branching and Merging: Use branches to work on different features or fixes independently, and merge them back into the main branch when ready.</li> <li>Collaboration: Use remote repositories and pull requests to collaborate with others and review changes before merging.</li> </ul>"},{"location":"chapters/02_working_with_git/#practical-tips","title":"Practical Tips","text":"<ul> <li>Commit: Make commits with clear semantic messages.</li> <li>Use Branches: Create branches for new features, bug fixes, and experiments.</li> <li>Sync Regularly: Pull changes from the remote repository frequently to stay up-to-date.</li> <li>Resolve Conflicts Early: Address merge conflicts as soon as they arise to avoid larger issues later.</li> <li>Review Code: Conduct thorough code reviews to maintain code quality and share knowledge.</li> </ul> <ol> <li> <p>Scott Chacon and Ben Straub. Pro Git. Apress, 2014. URL: https://git-scm.com/book/en/v2.\u00a0\u21a9</p> </li> </ol>"},{"location":"chapters/references/","title":"References","text":"<ol> <li> <p>Scott Chacon and Ben Straub. Pro Git. Apress, 2014. URL: https://git-scm.com/book/en/v2.\u00a0\u21a9</p> </li> <li> <p>Visual Studio Code Documentation Team. Source control in visual studio code. Accessed: 2024-11-05. URL: https://code.visualstudio.com/docs/sourcecontrol/overview.\u00a0\u21a9</p> </li> </ol>"},{"location":"keywords/","title":"Keywords","text":"<p>Here\u2019s a list of used keywords:</p> <ol> <li> <p>Scott Chacon and Ben Straub. Pro Git. Apress, 2014. URL: https://git-scm.com/book/en/v2.\u00a0\u21a9</p> </li> <li> <p>Visual Studio Code Documentation Team. Source control in visual studio code. Accessed: 2024-11-05. URL: https://code.visualstudio.com/docs/sourcecontrol/overview.mkdocs\u00a0\u21a9</p> </li> </ol>"}]}